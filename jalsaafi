<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>JalSaafi | Smart Oil Spill Bot</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Lora:wght@400;500;600;700&family=Open+Sans:wght@300;400;500;600;700&family=Exo:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Lora', serif;
    }
   
    :root {
      --primary: #0a1428;
      --secondary: #0d203f;
      --accent1: #00b7ff;
      --accent2: #00e0c7;
      --text: #ffffff;
      --text-secondary: #a0c0d8;
    }
   
    body {
      color: var(--text);
      overflow-x: hidden;
      line-height: 1.6;
      scroll-behavior: smooth;
    }
   
    /* Video background styling */
    #background-video {
      position: fixed;
      right: 0;
      bottom: 0;
      min-width: 100%;
      min-height: 100%;
      z-index: -1;
      object-fit: cover;
    }

    /* Navigation */
    nav {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 25px 0;
      position: fixed;
      width: 100%;
      top: 0;
      z-index: 1000;
      backdrop-filter: blur(10px);
      background: rgba(10, 20, 40, 0.7);
      border-bottom: 1px solid rgba(0, 231, 255, 0.1);
      transition: all 0.3s ease;
    }
   
    nav.scrolled {
      padding: 15px 0;
      background: rgba(10, 20, 40, 0.98);
      box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
    }
   
    .logo {
      font-size: 28px;
      font-weight: 800;
      color: var(--text); /* Fallback for browsers not supporting background-clip: text */
      text-decoration: none;
      margin-left: 40px;
      background: linear-gradient(to right, var(--accent1), var(--accent2));
      -webkit-background-clip: text;
      background-clip: text; /* Standard property for compatibility */
      -webkit-text-fill-color: transparent;
      display: flex;
      align-items: center;
      gap: 8px;
      font-family: 'Exo', sans-serif;
    }
   
    .logo i {
      font-size: 22px;
    }

    .nav-links {
      display: flex;
      list-style: none;
      margin-right: 40px;
      gap: 30px;
    }
   
    .nav-links li a {
      color: var(--text);
      text-decoration: none;
      font-weight: 500;
      font-size: 16px;
      padding: 8px 0;
      transition: color 0.3s;
      font-family: 'Open Sans', sans-serif;
    }
   
    .nav-links li a:hover {
      color: var(--accent1);
    }
   
    .nav-links li a.active {
      color: var(--accent2);
      border-bottom: 2px solid var(--accent2);
    }
   
    .menu-btn {
      display: none;
      font-size: 24px;
      cursor: pointer;
      background: linear-gradient(45deg, var(--accent1), var(--accent2));
      -webkit-background-clip: text;
      background-clip: text; /* Standard property for compatibility */
      -webkit-text-fill-color: transparent;
      margin-right: 40px;
    }
   
    /* Mobile menu styles */
    .nav-links.active {
      display: flex;
      flex-direction: column;
      position: absolute;
      top: 80px;
      left: 0;
      width: 100%;
      background: rgba(10, 20, 40, 0.95);
      padding: 20px 0;
      margin: 0;
      gap: 15px;
      text-align: center;
      transition: all 0.3s ease;
    }
   
    /* Hero */
    .hero {
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      overflow: hidden;
      padding-top: 80px;
      text-align: center;
      background: rgba(0, 0, 0, 0.55);
    }
   
    .hero-content {
      position: relative;
      z-index: 2;
    }
   
    .hero h1 {
      font-size: 4.5rem;
      font-weight: 800;
      margin-bottom: 20px;
      color: var(--text); /* Fallback for browsers not supporting background-clip: text */
      background: linear-gradient(to right, var(--accent1), var(--accent2), var(--accent1));
      -webkit-background-clip: text;
      background-clip: text; /* Standard property for compatibility */
      -webkit-text-fill-color: transparent;
      font-family: 'Exo', sans-serif;
      text-transform: uppercase;
      letter-spacing: 2px;
    }
   
    .hero p {
      font-size: 1.4rem;
      color: var(--text-secondary);
      max-width: 700px;
      margin: 0 auto 40px;
      font-family: 'Lora', serif;
    }
   
    .btn {
      padding: 16px 42px;
      background: linear-gradient(45deg, var(--accent1), var(--accent2));
      color: var(--text);
      text-decoration: none;
      border-radius: 50px;
      font-weight: 600;
      font-family: 'Exo', sans-serif;
      cursor: pointer;
      display: inline-block;
      transition: transform 0.3s, box-shadow 0.3s;
      border: none;
    }
   
    .btn:hover {
      transform: translateY(-3px);
      box-shadow: 0 10px 20px rgba(0, 183, 255, 0.3);
    }
   
    /* Content Sections */
    section {
      padding: 40px 40px;
      position: relative;
      background: rgba(0, 0, 0, 0.55);
    }
   
    .section-title {
      font-size: 2.5rem;
      margin-bottom: 40px;
      text-align: center;
      color: var(--text); /* Fallback for browsers not supporting background-clip: text */
      background: linear-gradient(to right, var(--accent1), var(--accent2));
      -webkit-background-clip: text;
      background-clip: text; /* Standard property for compatibility */
      -webkit-text-fill-color: transparent;
      font-family: 'Exo', sans-serif;
    }
   
    .section-content {
      max-width: 1200px;
      margin: 0 auto;
    }
   
    /* Image Grid */
    .image-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
      margin: 30px 0;
    }
   
    .image-card {
      text-align: center;
    }
   
    .image-card img {
      width: 100%;
      height: 200px;
      object-fit: cover;
      border-radius: 8px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
      transition: transform 0.3s ease;
    }
   
    .image-card img:hover {
      transform: scale(1.05);
    }
   
    .image-caption {
      margin-top: 10px;
      font-size: 0.9rem;
      color: var(--text-secondary);
      font-style: italic;
      font-family: 'Open Sans', sans-serif;
    }
   
    /* Students */
    .students {
      display: flex;
      gap: 20px;
      flex-wrap: wrap;
      margin-top: 40px;
      justify-content: center;
    }
   
    .student {
      flex: 1 1 250px;
      background: rgba(31, 40, 51, 0.8);
      padding: 20px;
      border-radius: 12px;
      text-align: center;
      transition: transform 0.3s, box-shadow 0.3s;
    }
   
    .student:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
    }
   
    .student img {
      width: 120px;
      height: 120px;
      object-fit: cover;
      border-radius: 50%;
      border: 3px solid var(--accent1);
      margin-bottom: 15px;
    }
   
    .student h3 {
      color: var(--accent2);
      margin-bottom: 10px;
      font-family: 'Exo', sans-serif;
    }
   
    .student p {
      font-family: 'Open Sans', sans-serif;
    }
   
    /* Game Controls */
    #controlsRow {
      max-width: 900px;
      margin: 12px auto 0;
      display: flex;
      justify-content: space-between;
      align-items: stretch;
      gap: 12px;
      flex-wrap: wrap;
    }
   
    #dpad {
      display: grid;
      gap: 8px;
      grid-template-columns: repeat(3, 70px);
      grid-template-rows: repeat(2, 56px);
      user-select: none;
      -webkit-user-select: none;
      touch-action: none;
    }
   
    .ctl-btn, .deploy-btn {
      background: rgba(255,255,255,0.15);
      border: 2px solid rgba(255,255,255,0.45);
      color: #fff;
      font-weight: 800;
      font-size: 1.2rem;
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 0;
      min-width: 36px;
      touch-action: manipulation;
      user-select: none;
      -webkit-tap-highlight-color: transparent;
      cursor: pointer;
      transition: all 0.3s ease;
      font-family: 'Open Sans', sans-serif;
    }
   
    .ctl-btn:active {
      background: rgba(255,255,255,0.3);
      transform: scale(0.95);
    }
   
    .ctl-btn:hover {
      background: var(--accent1);
      border-color: var(--accent1);
      box-shadow: 0 0 15px rgba(0, 183, 255, 0.3);
    }
   
    .deploy-wrap {
      display: flex;
      gap: 8px;
      align-items: stretch;
    }
   
    .deploy-btn {
      background: #e53935;
      border-color: rgba(255,255,255,0.65);
      min-width: 160px;
      min-height: 120px;
      font-size: 1rem;
    }
   
    .deploy-btn:active {
      background: #c62828;
      transform: scale(0.95);
    }
   
    .deploy-btn:hover {
      background: #d32f2f;
      box-shadow: 0 0 15px rgba(229, 57, 53, 0.4);
    }
   
    /* Comment Section */
    #commentForm {
      max-width: 600px;
      margin: 0 auto 30px;
      display: flex;
      flex-direction: column;
      gap: 15px;
    }
   
    #commentForm input, #commentForm textarea {
      background: rgba(255,255,255,0.1);
      border: 1px solid rgba(255,255,255,0.2);
      color: var(--text);
      padding: 12px;
      border-radius: 8px;
      font-size: 16px;
      font-family: 'Open Sans', sans-serif;
    }
   
    #commentForm input::placeholder, #commentForm textarea::placeholder {
      color: var(--text-secondary);
    }
   
    #commentForm input:focus, #commentForm textarea:focus {
      outline: none;
      border-color: var(--accent1);
      box-shadow: 0 0 10px rgba(0, 183, 255, 0.2);
    }
   
    .comment {
      background: rgba(31, 40, 51, 0.8);
      padding: 15px;
      border-radius: 8px;
      border-left: 3px solid var(--accent2);
      font-family: 'Open Sans', sans-serif;
    }
   
    /* Footer */
    footer {
      background: rgba(13, 32, 63, 0.8);
      text-align: center;
      padding: 40px 20px;
      color: var(--text-secondary);
      font-family: 'Open Sans', sans-serif;
    }
   
    /* Progress Bar */
    #progress-bar {
      position: fixed;
      top: 0;
      left: 0;
      height: 3px;
      background: linear-gradient(to right, var(--accent1), var(--accent2));
      width: 0%;
      z-index: 1000;
    }
   
    /* Reveal animations */
    .reveal {
      opacity: 0;
      transform: translateY(40px);
      transition: all 0.8s ease;
    }
   
    .reveal.active {
      opacity: 1;
      transform: translateY(0);
    }
   
    /* Responsive Design */
    @media (max-width: 768px) {
      .nav-links {
        display: none;
      }
      .nav-links.active {
        display: flex;
      }
      .menu-btn {
        display: block;
      }
      .hero h1 {
        font-size: 2.8rem;
      }
      .hero p {
        font-size: 1.2rem;
      }
      section {
        padding: 30px 20px;
      }
      .section-title {
        font-size: 2rem;
      }
      .students {
        flex-direction: column;
      }
      #controlsRow {
        justify-content: center;
        gap: 20px;
      }
      #dpad {
        grid-template-columns: repeat(3, 56px);
        grid-template-rows: repeat(2, 48px);
      }
      .deploy-btn {
        min-width: 130px;
        min-height: 50px;
        font-size: 0.9rem;
      }
      #commentForm {
        max-width: 100%;
      }
      .image-grid {
        grid-template-columns: 1fr;
        gap: 15px;
        margin: 20px 0;
      }
      .image-card img {
        height: 300px;
      }
    }
  </style>
</head>
<body>
  <!-- Background Video -->
  <video autoplay muted loop playsinline id="background-video">
    <source src="ocean.mp4" type="video/mp4" />
    Your browser does not support the video tag.
  </video>

  <!-- Navigation -->
  <nav id="navbar">
    <a href="#" class="logo"><i class="fas fa-water"></i>JalSaafi</a>
    <ul class="nav-links">
      <li><a href="#problem" class="nav-link">Problem</a></li>
      <li><a href="#solution" class="nav-link">Solution</a></li>
      <li><a href="#concept" class="nav-link">Bot</a></li>
      <li><a href="#demo" class="nav-link">Game</a></li>
      <li><a href="#about" class="nav-link">Team</a></li>
      <li><a href="#comments" class="nav-link">Feedback</a></li>
    </ul>
    <div class="menu-btn"><i class="fas fa-bars"></i></div>
  </nav>

  <!-- Progress Bar -->
  <div id="progress-bar"></div>

  <!-- Hero -->
  <section class="hero">
    <div class="hero-content">
      <h1>JalSaafi – Smart Oil Spill Bot</h1>
      <p>A student-made bot to protect our waters and future</p>
      <a href="#problem" class="btn">Let’s dive into it!</a>
    </div>
  </section>

  <!-- Problem Section -->
  <section id="problem">
    <h2 class="section-title reveal">The Problem</h2>
    <div class="section-content">
      <p class="reveal" style="font-size: 1.2rem; max-width: 900px; margin: 0 auto;">
        Oil spills threaten marine ecosystems and economies. Traditional cleanup methods are inefficient, and delays cause irreversible damage. Coastal livelihoods suffer as fishing becomes unsafe and unsustainable.
      </p>
      <div class="image-grid reveal">
        <div class="image-card">
          <img src="https://i.ibb.co/BHvSY80j/0-IVPu4r-ERDVihwq-YN.jpg" alt="0-IVPu4r-ERDVihwq-YN" border="0">
          <div class="image-caption">Oil spills cause devastating environmental damage to marine ecosystems</div>
        </div>
        <div class="image-card">
         <img src="https://i.ibb.co/WW3XLMVS/Deepwater-Horizon-oil-spill-still-detectable-1024x683.jpg" alt="Deepwater-Horizon-oil-spill-still-detectable-1024x683" border="0" />
          <div class="image-caption">Marine wildlife suffers severe consequences from oil contamination</div>
        </div>
        <div class="image-card">
        <img src="https://i.ibb.co/9kjBbwLy/Oil-Spill-1024x680.jpg" alt="Oil-Spill-1024x680" border="0" />
          <div class="image-caption">Coastal ecosystems face long-term damage from oil spills</div>
        </div>
      </div>
    </div>
  </section>

  <!-- Solution Section -->
  <section id="solution">
    <h2 class="section-title reveal">Our Solution</h2>
    <div class="section-content">
      <p class="reveal" style="font-size: 1.2rem; max-width: 900px; margin: 0 auto;">
        JalSaafi is a robot that detects oil spills in real-time, initiates cleanup with MSC sheets, and predicts fishing safety using live sensors (pH, turbidity, temperature, oil presence). It also avoids aquatic life using ultrasonic detection and vibration.
      </p>
      <div class="image-grid reveal">
        <div class="image-card">
        <a href="https://ibb.co/99zLVMtD"><img src="https://i.ibb.co/DDsy8qpJ/Screenshot-2025-09-03-135539.png" alt="Screenshot-2025-09-03-135539" border="0"></a>
          <div class="image-caption">Advanced robotic systems offer precision and efficiency in oil spill cleanup</div>
        </div>
        <div class="image-card">
         <a href="https://ibb.co/1YCX1bjq"><img src="https://i.ibb.co/cKW80xVF/ff34912d-7aed-4231-9d97-dbc3e0f8e759-removalai-preview.png" alt="ff34912d-7aed-4231-9d97-dbc3e0f8e759-removalai-preview" border="0"></a>
          <div class="image-caption">Eco-friendly MSC sheets for effective oil absorption</div>
        </div>
       
  </section>

  <!-- Bot Section -->
  <section id="concept">
    <h2 class="section-title reveal">Meet Our Bot</h2>
    <div class="section-content">
      <p class="reveal" style="font-size: 1.2rem; max-width: 900px; margin: 0 auto;">
        The JalSaafi bot floats on water, scans for spills and poor water quality, and cleans using eco-friendly MSC sheets. Controlled by ESP32, it can relay data to a web dashboard for live monitoring.
      </p>
      <div class="image-grid reveal">
        <div class="image-card">
         <img src="https://i.ibb.co/7xNQDxDf/image.png" alt="image" border="0">
          <div class="image-caption">JalSaafi prototype for autonomous water surface cleaning</div>
        </div>
        <div class="image-card">
          <img src="https://i.ibb.co/VYzwBDBL/Matlab.png" alt="Matlab" border="0">
          <div class="image-caption">Predictive Data Analysis of Oil Drift</div>
        </div>
        <div class="image-card">
          <img src="https://i.ibb.co/jq584jq/Screenshot-2025-09-03-143229.png" alt="Screenshot-2025-09-03-143229" border="0">
          <div class="image-caption">ESP32 module for seamless data processing and control</div>
        </div>
      </div>
    </div>
  </section>



  <!-- About Section -->
  <section id="about">
    <h2 class="section-title reveal">About the Team</h2>
    <div class="section-content">
      <div class="image-grid reveal">
        <div class="image-card">
         <img src="https://i.ibb.co/zTVwm1xw/IMG-20250730-WA0053.jpg" alt="IMG-20250730-WA0053" border="0">
          <div class="image-caption">Young innovators developing automated solutions </div>
        </div>
        <div class="image-card">
        <img src="https://i.ibb.co/dwp7WSCN/Screenshot-2025-09-03-145414.png" alt="Screenshot-2025-09-03-145414" border="0">
          <div class="image-caption">Collaborative efforts in designing the JalSaafi bot</div>
        </div>
        <div class="image-card">
          <img src="https://i.ibb.co/7FzF28C/IMG-20250730-WA0028.jpg" alt="IMG-20250730-WA0028" border="0">
          <div class="image-caption">Lab Testing of MSC Sheets in a controlled environment</div>
        </div>
      </div>
      <div class="students">
        <div class="student reveal">
          <img src="https://i.ibb.co/ksvdfZrS/Navishtha.jpg" alt="Navishtha" border="0" />
          <h3>Navishtha</h3>
          <p>Research & Development of MSC sheets</p>
        </div>
        <div class="student reveal">
          <img src="https://i.ibb.co/vxn8Fdvv/Dev.jpg" alt="Dev" border="0">
          <h3>Dev</h3>
          <p>Bot Design & Automation</p>
        </div>
        <div class="student reveal">
          <img src="https://i.ibb.co/SDsDrsQD/Hriday.jpg" alt="Hriday" border="0">
          <h3>Hriday</h3>
          <p>Sensor Calibration & Electronics</p>
        </div>
      </div>
    </div>
  </section>

  <!-- Demo Section -->
  <section id="demo">
    <h2 class="section-title reveal">Oil Spill Rescue Challenge</h2>
    <div class="section-content">
      <p class="reveal" style="font-size: 1.2rem; max-width: 900px; margin: 0 auto; margin-bottom: 20px;">
        Use the on-screen arrow buttons (↑ ↓ ← →) to move. Tap <strong>Deploy MSC</strong> to release a red MSC sheet (short burst, cooldown).
      </p>
      <div id="gameContainer" style="position:relative; max-width:900px; width:100%; aspect-ratio:16/9; border-radius:12px; overflow:hidden; box-shadow:0 8px 30px rgba(0,0,0,0.35); margin:0 auto;">
        <canvas id="jalGame" aria-label="Oil Spill Rescue Challenge" role="img"></canvas>
        <div id="hud" style="position:absolute; top:0; left:0; right:0; height:auto; pointer-events:none; display:flex; justify-content:space-between; gap:8px; padding:10px; align-items:flex-start;">
          <div style="display:flex; gap:12px; flex-wrap:wrap;">
            <span id="scoreHUD" style="background:rgba(0,0,0,0.45); padding:6px 10px; border-radius:8px; font-family: 'Open Sans', sans-serif;">Score: 0</span>
            <span id="spillsHUD" style="background:rgba(0,0,0,0.45); padding:6px 10px; border-radius:8px; font-family: 'Open Sans', sans-serif;">Spills Cleaned: 0</span>
            <span id="fishHUD" style="background:rgba(0,0,0,0.45); padding:6px 10px; border-radius:8px; font-family: 'Open Sans', sans-serif;">Fish Harmed: 0</span>
          </div>
          <span id="timeHUD" style="background:rgba(0,0,0,0.45); padding:6px 10px; border-radius:8px; font-family: 'Open Sans', sans-serif;">Time: 60</span>
        </div>
        <div id="overlay" style="position:absolute; inset:0; display:none; align-items:center; justify-content:center; background:rgba(0,0,0,0.7); padding:20px; text-align:center;">
          <div style="max-width:720px; width:92%; background:rgba(255,255,255,0.1); border:1px solid rgba(255,255,255,0.2); border-radius:14px; padding:18px;">
            <h3 style="margin-bottom:10px; font-family: 'Exo', sans-serif;">Round Summary</h3>
            <p id="summaryStats" style="margin-bottom:12px; font-family: 'Open Sans', sans-serif;"></p>
            <div id="factBox" style="background:rgba(0,0,0,0.35); padding:10px 12px; border-radius:10px; margin-bottom:14px; text-align:left;">
              <strong style="font-family: 'Open Sans', sans-serif;">Did you know?</strong>
              <p id="factText" style="margin-top:6px; font-family: 'Open Sans', sans-serif;"></p>
            </div>
            <button id="restartBtn" style="cursor:pointer; pointer-events:auto; background:#00ccff; color:#00212a; border:none; padding:10px 16px; border-radius:10px; font-weight:700; font-family: 'Exo', sans-serif;">
              Play Again
            </button>
          </div>
        </div>
      </div>
      <div id="controlsRow" style="max-width: 900px; margin: 12px auto 0; display: flex; justify-content: space-between; align-items: stretch; gap: 12px; flex-wrap: wrap;">
        <div id="dpad" style="display: grid; gap: 8px; grid-template-columns: repeat(3, 70px); grid-template-rows: repeat(2, 56px); user-select: none; -webkit-user-select: none; touch-action: none;">
          <div></div>
          <button id="btnUp" class="ctl-btn" style="grid-column:2; grid-row:1;" aria-label="Up">↑</button>
          <div></div>
          <button id="btnLeft" class="ctl-btn" style="grid-column:1; grid-row:2;" aria-label="Left">←</button>
          <button id="btnDown" class="ctl-btn" style="grid-column:2; grid-row:2;" aria-label="Down">↓</button>
          <button id="btnRight" class="ctl-btn" style="grid-column:3; grid-row:2;" aria-label="Right">→</button>
        </div>
        <div class="deploy-wrap" style="display: flex; gap: 8px; align-items: stretch;">
          <button id="deployBtn" class="deploy-btn" aria-label="Deploy MSC">DEPLOY&nbsp;MSC</button>
        </div>
      </div>
    </div>
  </section>

  <!-- Comment Section -->
  <section id="comments">
    <h2 class="section-title reveal">Share Your Feedback</h2>
    <div class="section-content">
      <form id="commentForm">
        <input type="text" id="name" placeholder="Your Name" required />
        <textarea id="message" rows="4" placeholder="Your Feedback..." required style="resize: vertical;"></textarea>
        <button type="submit" class="btn">Post Comment</button>
      </form>
      <div id="commentsList" style="max-width: 800px; margin: 0 auto; display: flex; flex-direction: column; gap: 10px;"></div>
    </div>
  </section>

  <!-- Footer -->
  <footer>
    <p>Created by Navishtha, Dev, Hriday — Guided by Tanveer Ma'am</p>
  </footer>

  <!-- Firebase Integration -->
  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/12.1.0/firebase-app.js";
    import { getDatabase, ref, push, onValue } from "https://www.gstatic.com/firebasejs/12.1.0/firebase-database.js";

    const firebaseConfig = {
      apiKey: "AIzaSyBNdPHVkMzewyPQIkuoDOoa3jLpoju0yIg",
      authDomain: "jalsaafi-1259c.firebaseapp.com",
      databaseURL: "https://jalsaafi-1259c-default-rtdb.firebaseio.com",
      projectId: "jalsaafi-1259c",
      storageBucket: "jalsaafi-1259c.firebasestorage.app",
      messagingSenderId: "1049532923740",
      appId: "1:1049532923740:web:fa89b40f28b277c1c8cb99",
      measurementId: "G-708EMZ9NEP"
    };

    const app = initializeApp(firebaseConfig);
    const db = getDatabase(app);
    const commentsRef = ref(db, "comments");

    document.getElementById("commentForm").addEventListener("submit", (e) => {
      e.preventDefault();
      const name = document.getElementById("name").value.trim();
      const message = document.getElementById("message").value.trim();
      if (name && message) {
        push(commentsRef, { name, message });
        e.target.reset();
      }
    });

    onValue(commentsRef, (snapshot) => {
      const commentsList = document.getElementById("commentsList");
      commentsList.innerHTML = "";
      snapshot.forEach((child) => {
        const data = child.val();
        const div = document.createElement("div");
        div.classList.add("comment");
        const strong = document.createElement("strong");
        strong.textContent = (data?.name || "Anonymous") + ": ";
        div.appendChild(strong);
        div.appendChild(document.createTextNode(data?.message || ""));
        commentsList.prepend(div);
      });
    });
  </script>

  <!-- Navigation and Game Scripts -->
  <script>
    // Navigation Functionality
    const navLinks = document.querySelector('.nav-links');
    const menuBtn = document.querySelector('.menu-btn');
    const navItems = document.querySelectorAll('.nav-link');
    const navbar = document.getElementById('navbar');

    menuBtn.addEventListener('click', () => {
      navLinks.classList.toggle('active');
      const isOpen = navLinks.classList.contains('active');
      menuBtn.querySelector('i').classList.toggle('fa-bars', !isOpen);
      menuBtn.querySelector('i').classList.toggle('fa-times', isOpen);
    });

    navItems.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href').substring(1);
        const targetElement = document.getElementById(targetId);
        if (targetElement) {
          const navbarHeight = navbar.offsetHeight;
          const targetPosition = targetElement.getBoundingClientRect().top + window.pageYOffset - navbarHeight;
          window.scrollTo({
            top: targetPosition,
            behavior: 'smooth'
          });
        }
        navLinks.classList.remove('active');
        menuBtn.querySelector('i').classList.add('fa-bars');
        menuBtn.querySelector('i').classList.remove('fa-times');
      });
    });

    navItems.forEach(link => {
      link.setAttribute('tabindex', '0');
      link.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          link.click();
        }
      });
    });

    function highlightActiveLink() {
      const sections = document.querySelectorAll('section');
      const scrollPosition = window.scrollY + navbar.offsetHeight + 50;

      sections.forEach(section => {
        const sectionTop = section.offsetTop;
        const sectionHeight = section.offsetHeight;
        const sectionId = section.getAttribute('id');

        if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
          navItems.forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href') === `#${sectionId}`) {
              link.classList.add('active');
            }
          });
        }
      });

      if (scrollPosition < sections[0].offsetTop) {
        navItems.forEach(link => link.classList.remove('active'));
      }
    }

    window.addEventListener('scroll', () => {
      const nav = document.getElementById('navbar');
      if (window.scrollY > 50) {
        nav.classList.add('scrolled');
      } else {
        nav.classList.remove('scrolled');
      }
      highlightActiveLink();

      const progress = document.getElementById('progress-bar');
      const h = document.documentElement;
      const scrolled = (h.scrollTop) / (h.scrollHeight - h.clientHeight) * 100;
      progress.style.width = scrolled + "%";
    });

    function reveal() {
      document.querySelectorAll('.reveal').forEach(el => {
        const top = el.getBoundingClientRect().top;
        if (top < window.innerHeight - 60) el.classList.add('active');
      });
    }
    window.addEventListener('scroll', reveal);
    window.addEventListener('load', reveal);

    // Game Logic
    (function(){
      const canvas = document.getElementById('jalGame');
      if (!canvas) return;
     
      const ctx = canvas.getContext('2d', { alpha: false });

      function resizeCanvas() {
        const container = document.getElementById('gameContainer');
        if (!container) return;
        const rect = container.getBoundingClientRect();
        canvas.width = Math.floor(rect.width);
        canvas.height = Math.floor(rect.height);
      }
      resizeCanvas();
      window.addEventListener('resize', resizeCanvas);

      const scoreHUD = document.getElementById('scoreHUD');
      const spillsHUD = document.getElementById('spillsHUD');
      const fishHUD = document.getElementById('fishHUD');
      const timeHUD = document.getElementById('timeHUD');
      const overlay = document.getElementById('overlay');
      const summaryStats = document.getElementById('summaryStats');
      const factText = document.getElementById('factText');
      const restartBtn = document.getElementById('restartBtn');

      let keys = {};
      let gameRunning = false;
      let score = 0;
      let spillsCleaned = 0;
      let fishHarmed = 0;
      let timeLeft = 60;
      let lastTime = 0;
      let spawnOilTimer = 0;
      let spawnFishTimer = 0;

      const player = {
        x: 200, y: 200, r: 16,
        speed: 220,
        vx: 0, vy: 0,
        mscActive: false,
        mscRadius: 60,
        mscDuration: 1600,
        mscCooldown: 2600,
        mscReadyAt: 0,
        mscEndsAt: 0
      };

      const oils = [];
      const fish = [];

      const FACTS = [
        "MSC (magnetic scaffolded cellulose) sheets can be reused 5–10 times for oil absorption with minimal performance loss.",
        "Just 1 liter of oil can contaminate up to 1,000,000 liters of water.",
        "Heavy fuel oils are hardest to clean—they emulsify and persist for months or years.",
        "Smart cleanup strategies combine sorbents (like MSC) with skimmers and fish-safe routing.",
        "Reducing response time by minutes can save kilometers of coastline from contamination.",
        "Light refined oils are acutely toxic; heavy oils cause long-term ecosystem damage."
      ];

      function rand(min, max) { return Math.random() * (max - min) + min; }
      function clamp(v, a, b) { return Math.max(a, Math.min(b, v)); }
      function dist2(ax, ay, bx, by) { const dx = ax - bx; const dy = ay - by; return dx * dx + dy * dy; }

      function spawnOil() {
        const pad = 40;
        const x = rand(pad, canvas.width - pad);
        const y = rand(pad, canvas.height - pad);
        oils.push({
          x, y,
          r: rand(14, 24),
          growth: rand(2, 6) / 100,
          active: true
        });
      }

      function spawnFish() {
        const side = Math.random() < 0.5 ? 'left' : 'right';
        const y = rand(40, canvas.height - 40);
        const x = side === 'left' ? -20 : canvas.width + 20;
        const speed = rand(60, 120) * (side === 'left' ? 1 : -1);
        fish.push({
          x, y,
          r: 10,
          vx: speed,
          vy: rand(-30, 30)
        });
      }

      function resetGame() {
        score = 0; spillsCleaned = 0; fishHarmed = 0; timeLeft = 60;
        oils.length = 0; fish.length = 0;
        player.x = canvas.width * 0.5;
        player.y = canvas.height * 0.5;
        player.vx = player.vy = 0;
        player.mscActive = false;
        player.mscReadyAt = 0;
        player.mscEndsAt = 0;
        spawnOilTimer = 0;
        spawnFishTimer = 0;
        for (let i = 0; i < 3; i++) spawnOil();
        for (let i = 0; i < 3; i++) spawnFish();
        overlay.style.display = 'none';
        gameRunning = true;
        lastTime = performance.now();
        requestAnimationFrame(loop);
      }

      function endRound() {
        gameRunning = false;
        const fact = FACTS[Math.floor(Math.random() * FACTS.length)];
        summaryStats.textContent = `Score: ${score} | Spills Cleaned: ${spillsCleaned} | Fish Harmed: ${fishHarmed}`;
        factText.textContent = fact;
        overlay.style.display = 'flex';
      }

      function tryDeployMSC() {
        const now = performance.now();
        if (!player.mscActive && now >= player.mscReadyAt && gameRunning) {
          player.mscActive = true;
          player.mscEndsAt = now + player.mscDuration;
          player.mscReadyAt = player.mscEndsAt + player.mscCooldown;
        }
      }

      window.addEventListener('keydown', (e) => {
        const typing = e.target.tagName === "INPUT" || e.target.tagName === "TEXTAREA";
        if (!typing && ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', ' '].includes(e.key)) {
          e.preventDefault();
        }
        if (!typing) {
          keys[e.key] = true;
          if (e.key === ' ') tryDeployMSC();
        }
      }, { passive: false });

      window.addEventListener('keyup', (e) => {
        keys[e.key] = false;
      });

      function bindDir(btnId, keyName) {
        const el = document.getElementById(btnId);
        if (!el) return;
        const set = (v) => { keys[keyName] = v; };
        el.addEventListener('pointerdown', (ev) => { ev.preventDefault(); set(true); el.setPointerCapture?.(ev.pointerId); }, { passive: false });
        el.addEventListener('pointerup', (ev) => { ev.preventDefault(); set(false); }, { passive: false });
        el.addEventListener('pointercancel', () => set(false));
        el.addEventListener('pointerleave', () => set(false));
      }
      bindDir('btnUp', 'ArrowUp');
      bindDir('btnDown', 'ArrowDown');
      bindDir('btnLeft', 'ArrowLeft');
      bindDir('btnRight', 'ArrowRight');

      const deployBtn = document.getElementById('deployBtn');
      if (deployBtn) {
        deployBtn.addEventListener('pointerdown', (e) => { e.preventDefault(); tryDeployMSC(); }, { passive: false });
      }

      if (restartBtn) {
        restartBtn.addEventListener('click', resetGame);
      }

      function update(dt) {
        timeLeft -= dt;
        if (timeLeft <= 0) { timeLeft = 0; endRound(); return; }

        let ax = 0, ay = 0;
        if (keys['ArrowLeft']) ax -= 1;
        if (keys['ArrowRight']) ax += 1;
        if (keys['ArrowUp']) ay -= 1;
        if (keys['ArrowDown']) ay += 1;

        if (ax !== 0 || ay !== 0) {
          const mag = Math.hypot(ax, ay);
          ax /= mag; ay /= mag;
        }
        player.vx = ax * player.speed;
        player.vy = ay * player.speed;

        player.x = clamp(player.x + player.vx * dt, player.r, canvas.width - player.r);
        player.y = clamp(player.y + player.vy * dt, player.r, canvas.height - player.r);

        const now = performance.now();
        if (player.mscActive && now >= player.mscEndsAt) {
          player.mscActive = false;
        }

        spawnOilTimer += dt;
        if (spawnOilTimer >= 2.5) {
          spawnOil(); spawnOilTimer = 0;
        }
        spawnFishTimer += dt;
        if (spawnFishTimer >= 3.2) {
          spawnFish(); spawnFishTimer = 0;
        }

        for (let i = oils.length - 1; i >= 0; i--) {
          const o = oils[i];
          if (!o.active) continue;
          o.r += o.growth * (60 * dt);
          if (player.mscActive) {
            const d2 = dist2(player.x, player.y, o.x, o.y);
            const R = player.mscRadius + o.r * 0.5;
            if (d2 < R * R) {
              score += Math.max(5, Math.round(o.r));
              spillsCleaned += 1;
              o.active = false;
              oils.splice(i, 1);
            }
          }
        }

        for (let i = fish.length - 1; i >= 0; i--) {
          const f = fish[i];
          f.x += f.vx * dt;
          f.y += f.vy * dt;
          if (f.y < 12 || f.y > canvas.height - 12) f.vy *= -1;

          let harmed = false;
          for (const o of oils) {
            if (!o.active) continue;
            const d2 = dist2(f.x, f.y, o.x, o.y);
            if (d2 < (o.r + f.r) * (o.r + f.r)) {
              harmed = true;
              break;
            }
          }
          if (harmed) {
            fishHarmed += 1;
            score = Math.max(0, score - 10);
            fish.splice(i, 1);
            continue;
          }

          if (f.x < -40 || f.x > canvas.width + 40) fish.splice(i, 1);
        }

        if (scoreHUD) scoreHUD.textContent = 'Score: ' + score;
        if (spillsHUD) spillsHUD.textContent = 'Spills Cleaned: ' + spillsCleaned;
        if (fishHUD) fishHUD.textContent = 'Fish Harmed: ' + fishHarmed;
        if (timeHUD) timeHUD.textContent = 'Time: ' + Math.ceil(timeLeft);
      }

      function draw() {
        ctx.fillStyle = '#083d52';
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        const grd = ctx.createLinearGradient(0, 0, 0, canvas.height);
        grd.addColorStop(0, 'rgba(0,200,255,0.18)');
        grd.addColorStop(1, 'rgba(0,0,0,0.12)');
        ctx.fillStyle = grd;
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        for (const o of oils) {
          if (!o.active) continue;
          ctx.beginPath();
          ctx.arc(o.x, o.y, o.r, 0, Math.PI * 2);
          ctx.closePath();
          ctx.fillStyle = '#1b1b1b';
          ctx.fill();
          ctx.lineWidth = 3;
          ctx.strokeStyle = 'rgba(255,140,0,0.6)';
          ctx.stroke();
        }

        for (const f of fish) {
          ctx.save();
          ctx.translate(f.x, f.y);
          ctx.fillStyle = '#7ae2ff';
          ctx.beginPath();
          ctx.ellipse(0, 0, 12, 7, 0, 0, Math.PI * 2);
          ctx.fill();
          ctx.beginPath();
          ctx.moveTo(-12, 0);
          ctx.lineTo(-20, -6);
          ctx.lineTo(-20, 6);
          ctx.closePath();
          ctx.fill();
          ctx.restore();
        }

        ctx.save();
        ctx.translate(player.x, player.y);
        if (player.mscActive) {
          const pct = (player.mscEndsAt - performance.now()) / player.mscDuration;
          const activeRadius = player.mscRadius * (0.85 + 0.15 * Math.max(0, pct));
          ctx.beginPath();
          ctx.arc(0, 0, activeRadius, 0, Math.PI * 2);
          ctx.fillStyle = 'rgba(255, 0, 0, 0.18)';
          ctx.fill();
          ctx.lineWidth = 2;
          ctx.strokeStyle = 'rgba(255, 0, 0, 0.4)';
          ctx.stroke();
        }
        ctx.fillStyle = '#00ccff';
        ctx.beginPath();
        ctx.arc(0, 0, player.r, 0, Math.PI * 2);
        ctx.fill();
        ctx.fillStyle = '#00212a';
        ctx.beginPath();
        ctx.moveTo(0, -player.r);
        ctx.lineTo(6, -2);
        ctx.lineTo(-6, -2);
        ctx.closePath();
        ctx.fill();
        ctx.restore();

        const now = performance.now();
        const readyIn = Math.max(0, player.mscReadyAt - now);
        if (readyIn > 0) {
          const pct = 1 - (readyIn / (player.mscCooldown + player.mscDuration));
          const w = Math.max(0, Math.min(canvas.width * 0.25, canvas.width - 20));
          ctx.fillStyle = 'rgba(0,0,0,0.35)';
          ctx.fillRect(10, 10, w, 8);
          ctx.fillStyle = '#00ccff';
          ctx.fillRect(10, 10, w * pct, 8);
        } else {
          ctx.beginPath();
          ctx.arc(18, 14, 6, 0, Math.PI * 2);
          ctx.fillStyle = '#00ff9d';
          ctx.fill();
        }
      }

      function loop(t) {
        if (!gameRunning) return;
        const dt = Math.min(0.05, (t - lastTime) / 1000 || 0);
        lastTime = t;
        update(dt);
        draw();
        if (gameRunning) requestAnimationFrame(loop);
      }

      if (canvas && scoreHUD && spillsHUD && fishHUD && timeHUD) {
        resetGame();
      }
    })();
  </script>
</body>
</html>
